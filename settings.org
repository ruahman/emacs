* General Settings
#+BEGIN_SRC emacs-lisp
  ;;(setq user-full-name "Diego Vila")

  ;; take out startup screen
  ;;(setq inhibit-startup-message t)

  ;; cause scroll bar, tool bar, and menu to disapear
  ;(scroll-bar-mode -1)
  ;(tool-bar-mode -1)
  ;(menu-bar-mode -1)

  ;; get ride of word wrapping
  (setq-default truncate-lines 1)

  ;; get ride of the fringes from side of window
  ;;(set-fringe-mode 0)      

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; show line numbers
  (global-display-line-numbers-mode t)

  ;; show column number in mode line
  (column-number-mode)

  ;; set font
  (set-face-attribute 'default nil :font "Hack Nerd Font" :height 150)

  ;; so that magit does not freeze
  (setq max-specpdl-size 13000)

#+END_SRC
* Packages
** setup
#+begin_src emacs-lisp
  ;;;; Initialize package sources
  (require 'package)

  ;; set archives to retrieve packages
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

#+end_src
** use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  ;; insure that package is downloaded 
  (setq use-package-always-ensure t)
#+end_src
** general
#+begin_src emacs-lisp
  ;; more convienient way of setting up keybindings
  (use-package general)
#+end_src
** hydra
#+begin_src emacs-lisp
  ;; allow repeating keys
  (use-package hydra)
#+end_src
** swiper
#+begin_src emacs-lisp
  ;; for serching text in buffer
  (use-package swiper
    :bind (("C-s" . swiper)))
#+end_src
** ivy
#+begin_src emacs-lisp
  ;; autocomplete for search buffers
  (use-package ivy
    :diminish
    :config (ivy-mode 1))

  ;; helps with auto complete
  (use-package counsel :ensure t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x f" . counsel-find-file))
    )

  ;; add extra information to search buffers
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src
** which-key
#+begin_src emacs-lisp
  ;; list menu for showing which key to use for keybinding
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config (which-key-mode)
    )
#+end_src
** org
#+begin_src emacs-lisp
  ;; get latest org mode
  (use-package org
    :bind (("C-c a" . org-agenda))
    :config
    (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))
    (setq org-startup-indented t)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files
          '("~/Documents/org/tasks.org"
            "~/Documents/org/agenda.org"
            "~/Documents/org/goals.org"
            "~/Documents/org/habits.org"
            "~/Documents/org/archive.org"))
    (setq org-ellipsis " ")
    (setq org-refile-targets '(("archive.org" :maxlevel . 1)))
    (advice-add 'org-refile :after 'org-save-all-org-buffers))

  ;; nicer bullits for org mode
  (use-package org-superstar)

  (setq org-superstar-headline-bullets-list
      '("◉" "◈" "○" "▷" "✸" "✦" "∗" "✧"))

  ;; setup task with pomodoros
  (use-package org-pomodoro)
#+end_src
** org-fc
#+begin_src emacs-lisp
  ;; (use-package hydra)
  ;; ;; org-fc is not yet MELPA / ELPA
  ;; (use-package org-fc
  ;;   :load-path "~/.emacs.d/org-fc"
  ;;   :custom (org-fc-directories '("~/Documents/org/flashcards/"))
  ;;   :config
  ;;   (require 'org-fc-hydra))
#+end_src
** org-drill
#+begin_src emacs-lisp
  (use-package org-drill)
#+end_src
** magit
#+begin_src emacs-lisp
  ;; git program
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** dashboard
#+begin_src emacs-lisp
  ;; dashboard that shows up in beggining
  (use-package dashboard
     :config
     (dashboard-setup-startup-hook))
  #+end_src
** doom
#+begin_src emacs-lisp
  ;; cool color thems
  (use-package doom-themes
    :init
    (load-theme 'doom-palenight t))

  ;; better mode line
  ;; (use-package doom-modeline
  ;;   :init (doom-modeline-mode 1))

  ;; ;; show icons
  ;; (use-package all-the-icons)
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
  ;; ranbow brakets
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** writeroom-mode
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode)
#+END_SRC
* Hooks
** display-line-numbers-mode
#+begin_src emacs-lisp
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  text-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** text-mode-hook
#+begin_src emacs-lisp
  ;; enable flyspell for text mode
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda ()
                      (visual-line-mode 1)
                      ;(writeroom-mode 1)
                      (flyspell-mode 1))))
#+end_src
** org-mode-hook
#+begin_src emacs-lisp
  ;; hook it to org-mode
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src
* Keybindings
#+BEGIN_SRC emacs-lisp
  ;;(general-define-key
  ;;  "C-c a" 'org-agenda)

  (defhydra hydra-zoom (global-map "<f2>")
      "zoom"
      ("<up>" text-scale-increase "in")
      ("<down>" text-scale-decrease "out"))

  (defhydra hydra-buffer (global-map "<f1>")
    "buffer"
    ("<left>" previous-buffer "prev")
    ("<right>" next-buffer "next"))
#+END_SRC

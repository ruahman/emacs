* General Settings
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Diego Vila")

  ;; take out startup screen
  (setq inhibit-startup-message t)

  ;; cause scroll bar, tool bar, and menu to disapear
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; get ride of word wrapping
  (setq-default truncate-lines 1)

  ;; get ride of the fringes from side of window
  (set-fringe-mode 10)      

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; show line numbers
  (global-display-line-numbers-mode t)

  ;; show column number in mode line
  (column-number-mode)

  ;; set font for client
  (defun set-font-faces()
    (message "setting font")
    (set-face-attribute 'variable-pitch nil :font "Hack Nerd Font" :height 150)
    (set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font" :height 150)
    (set-face-attribute 'default nil :font "Hack Nerd Font" :height 150))

  ;; if emacs is running as a server
  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (with-selected-frame frame
		    (set-font-faces))))
      (set-font-faces))

  ;; so that magit does not freeze
  (setq max-specpdl-size 13000)

  ;; initial buffer to show when in emacsclient
  ;; (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

  (if (eq system-type 'windows-nt)
      (progn
	  (setenv "LANG" "en_US.UTF-8")
	  (setq ispell-program-name "hunspell")
	  (setq ispell-dictionary "en_US")
	  (setq ispell-hunspell-dict-paths-alist
	    '(("en_US" "C:\\Hunspell\\en_US.aff")))))
#+END_SRC
* Packages
** use-package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
** general
#+begin_src emacs-lisp
  ;; more convienient way of setting up keybindings
  (use-package general)
#+end_src
** hydra
#+begin_src emacs-lisp
  ;; allow repeating keys
  ;; (use-package hydra)
#+end_src
** swiper
#+begin_src emacs-lisp
  ;; for serching text in buffer
  (use-package swiper
    :bind (("C-s" . swiper)))
#+end_src
** ivy
#+begin_src emacs-lisp
  ;; autocomplete for search buffers
  (use-package ivy
    :diminish
    :config (ivy-mode 1))

  ;; helps with auto complete
  (use-package counsel :ensure t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer))
    )

  ;; add extra information to search buffers
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src
** which-key
#+begin_src emacs-lisp
  ;; list menu for showing which key to use for keybinding
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 3))
#+end_src
** org
#+begin_src emacs-lisp
    ;; get latest org mode
    (use-package org
      :bind (("C-c a" . org-agenda))
      :config
      (setq org-startup-indented t)
      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-ellipsis "...")
      (setq org-clock-sound "~/.emacs.d/sounds/bell3.mp3")
      (setq org-agenda-files (list "~/GTD/tasks.org")))
#+end_src
** org-contrib
#+begin_src emacs-lisp
  (use-package org-contrib)
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))
#+end_src
** org-roam
#+begin_src emacs-lisp
  ;; (use-package org-roam
  ;;   :ensure t
  ;;   :init
  ;;   (setq org-roam-v2-ack t)
  ;;   :custom
  ;;   (org-roam-directory "~/OrgRoam")
  ;;   :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;          ("C-c n f" . org-roam-node-find)
  ;;          ("C-c n i" . org-roam-node-insert))
  ;;   :config
  ;;   (org-roam-setup))
#+end_src
** org-drill
#+begin_src emacs-lisp
  (use-package org-drill
    :config
    (setq org-drill-cram-hours 0))
#+end_src
** ob-swift
#+begin_src emacs-lisp
  ;; (use-package ob-swift)
#+end_src
** ob-rust
#+begin_src emacs-lisp
  ;; (use-package ob-rust)

  ; active Babel languages
  ;; (org-babel-do-load-languages
  ;;   'org-babel-load-languages
  ;;   '((rust . t)
  ;;     (java . t)
  ;;     (emacs-lisp . t)))
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1))
#+end_src
** dashboard
#+begin_src emacs-lisp
  ;; dashboard that shows up in beggining
  (use-package dashboard
     :config
     (dashboard-setup-startup-hook))
#+end_src
** doom
#+begin_src emacs-lisp
  ;; cool color thems
  (use-package doom-themes
    :init
    (load-theme 'doom-palenight t))

  ;; better mode line
  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  ;; show icons
  (use-package all-the-icons)
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
  ;; ranbow brakets
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** writeroom-mode
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode)
#+END_SRC
** magit
#+begin_src emacs-lisp
  ;; git program
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
* Hooks
** display-line-numbers-mode
#+begin_src emacs-lisp
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  text-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** text-mode-hook
#+begin_src emacs-lisp
    ;; enable flyspell for text mode
    (dolist (hook '(text-mode-hook))
      (add-hook hook (lambda ()
                        (visual-line-mode 1)
                        ;(writeroom-mode 1)
                        ;(flyspell-mode 1)
                        )))
#+end_src
* Keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key
       "C-x w" 'writeroom-mode)

  (general-define-key
       "C-x f" 'flyspell-mode)

  ;;  (defhydra hydra-zoom (global-map "<f2>")
    ;;      "zoom"
    ;;      ("<up>" text-scale-increase "in")
    ;;      ("<down>" text-scale-decrease "out"))
    ;;
    ;;  (defhydra hydra-buffer (global-map "<f1>")
    ;;    "buffer"
    ;;    ("<left>" previous-buffer "prev")
    ;;    ("<right>" next-buffer "next"))
#+END_SRC
